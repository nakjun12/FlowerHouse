name: Test Failure Workflow

on:
  pull_request:
    branches: [main]

jobs:
  test_job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
  success_job:
    runs-on: ubuntu-latest
    steps:
      - name: 성공하는 단계
        id: success_step
        run: |
          echo "이 단계는 성공합니다"
          exit 0

  failure_job:
    runs-on: ubuntu-latest
    steps:
      - name: 실패하는 단계
        id: failure_step
        run: |
          echo "이 단계는 실패합니다"
          exit 1

  notify-on-completion:
    name: Notify Slack on Job Completion
    needs: [test_job, success_job]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Notify Slack

        env:
          SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
          NEEDS_JSON: ${{ toJson(needs) }}
        run: |
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_AUTHOR_LOGIN="${{ github.event.pull_request.user.login }}"

          TEAM_MEMBERS=$(cat team-config/team_members.json)

          get_member_info() {
            echo "$TEAM_MEMBERS" | jq -r --arg github_id "$1" '.members[] | select(.github_id == $github_id) | .'$2''
          }

          AUTHOR_NAME=$(get_member_info "$PR_AUTHOR_LOGIN" "name")

          REVIEWERS=$(echo "$TEAM_MEMBERS" | jq -r --arg author "$PR_AUTHOR_LOGIN" '.members[] | select(.github_id != $author) | .github_id' | shuf -n 2)

          REVIEWER_MENTIONS=""
          for reviewer_github_id in $REVIEWERS; do
            reviewer_slack_id=$(get_member_info "$reviewer_github_id" "slack_id")
            REVIEWER_MENTIONS+="(<@${reviewer_slack_id}>) "
          done
          REVIEWER_MENTIONS=${REVIEWER_MENTIONS% }

          # Check if the PR author is in the author_slack_id array
          if [[ ! " ${!author_slack_id[@]} " =~ " ${PR_AUTHOR_LOGIN} " ]]; then
            echo "PR author ${PR_AUTHOR_LOGIN} is not in the notification list. Skipping notification."
            exit 0
          fi

          AUTHOR_MENTION="<@${author_slack_id[$PR_AUTHOR_LOGIN]}>"


          # Initialize overall status
          OVERALL_STATUS="success"
          EMOJI=":white_check_mark:"

          # Check all jobs in the needs context using jq
          if echo "$NEEDS_JSON" | jq -e '.[] | select(.result == "failure")' > /dev/null; then
            OVERALL_STATUS="failure"
            EMOJI=":x:"
            GITHUB_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi


          # Build the message
          MESSAGE="<$PR_URL|$PR_TITLE> - ${EMOJI}
          *작성자:* $AUTHOR_MENTION"

          if [ "$OVERALL_STATUS" = "failure" ]; then
          MESSAGE="$MESSAGE
          *Github Action:* $GITHUB_URL"
          fi

          MESSAGE="$MESSAGE

          <$PR_URL|$PR_TITLE> :crown-sw:
          *작성자:* ${AUTHOR_NAME}쌤
          *리뷰어:* $REVIEWER_MENTIONS

          # Send the message to Slack
          curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"$MESSAGE\"}" $SLACK_WEBHOOK_URL
