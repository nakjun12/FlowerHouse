name: Test Failure Workflow

on:
  pull_request:
    branches: [main]

jobs:
  test_job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - run: ls -al
  success_job:
    runs-on: ubuntu-latest
    steps:
      - name: 성공하는 단계
        id: success_step
        run: |
          echo "이 단계는 성공합니다"
          exit 0

  failure_job:
    runs-on: ubuntu-latest
    steps:
      - name: 실패하는 단계
        id: failure_step
        run: |
          echo "이 단계는 실패합니다"
          exit 1

  notify-on-completion:
    name: Notify Slack on Job Completion
    needs: [test_job, success_job]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
          NEEDS_JSON: ${{ toJson(needs) }}
        run: |
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_AUTHOR_LOGIN="${{ github.event.pull_request.user.login }}"



          # Mapping GitHub usernames to Slack Id
          declare -A author_slack_id=(
          [nakjun12]="U0768APFN0L"
          )

          declare -A author_names=(
            [nakjun12]="황낙준"
          )

          # Check if the PR author is in the author_slack_id array
          if [[ ! " ${!author_slack_id[@]} " =~ " ${PR_AUTHOR_LOGIN} " ]]; then
            echo "PR author ${PR_AUTHOR_LOGIN} is not in the notification list. Skipping notification."
            exit 0
          fi

          AUTHOR_MENTION="<@${author_slack_id[$PR_AUTHOR_LOGIN]}>"


          # Initialize overall status
          OVERALL_STATUS="success"
          EMOJI=":white_check_mark:"

          # Check all jobs in the needs context using jq
          if echo "$NEEDS_JSON" | jq -e '.[] | select(.result == "failure")' > /dev/null; then
            OVERALL_STATUS="failure"
            EMOJI=":x:"
            GITHUB_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi


          # Build the message
          MESSAGE="<$PR_URL|$PR_TITLE> - ${EMOJI}
          *작성자:* $AUTHOR_MENTION"

          if [ "$OVERALL_STATUS" = "failure" ]; then
          MESSAGE="$MESSAGE
          *Github Action:* $GITHUB_URL"
          fi

          MESSAGE="$MESSAGE

          <$PR_URL|$PR_TITLE> :crown-sw:
          *작성자:* ${author_names[$PR_AUTHOR_LOGIN]}쌤
          *리뷰어:* <!subteam^S06RV0M0C3S|palette-fe-web>"

          # Send the message to Slack
          curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"$MESSAGE\"}" $SLACK_WEBHOOK_URL
      - name: "checkout test"
        run: ls -al
