name: Update PR Description

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  update-pr-description:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get changed files, packages, and commits
        id: changes
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | sort | uniq)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Function to find the nearest package.json or parent directory name
          find_package() {
            local dir=$(dirname "$1")
            while [[ "$dir" != "." && "$dir" != "/" ]]; do
              if [[ -f "$dir/package.json" ]]; then
                echo $(jq -r .name "$dir/package.json")
                return 0
              fi
              dir=$(dirname "$dir")
            done

              if [[ -f "./package.json" ]]; then
                echo $(jq -r .name "./package.json")
                return 0
              fi

            echo "Unknown"
          }


          # Get package names
          CHANGED_PACKAGES=$(echo "$CHANGED_FILES" | while read file; do find_package "$file"; done | sort | uniq)
          if [ -z "$CHANGED_PACKAGES" ]; then
            CHANGED_PACKAGES="No packages detected"
          fi
          echo "Changed packages:"
          echo "$CHANGED_PACKAGES"

          # Get all commit messages
          COMMIT_MESSAGES=$(git log --format="- %s%n%b" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | sed '/./s/^$//' | sed -e '/^$/d' -e '/^- $/d')
          echo "Commit messages:"
          echo "$COMMIT_MESSAGES"

          # Set outputs
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "changed_packages<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "commit_messages<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Fetch Related Issues
        id: related_issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG: "my-type-world-cup"
          REPO: "my-type-world-cup-frontend"
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        run: |
          RELATED_ISSUES=$(gh api graphql -f query='
            query($org: String!, $repo: String!, $author: String!) {
              repository(owner: $org, name: $repo) {
                issues(filterBy: {assignee: $author, states: OPEN}, first: 10) {
                  nodes {
                    number
                    title
                    url
                  }
                }
              }
            }
          ' -F org=$ORG -F repo=$REPO -F author=$PR_AUTHOR --jq '.data.repository.issues.nodes[] | "- [#\(.number) \(.title)](\(.url))"')

          echo "related_issues<<EOF" >> $GITHUB_OUTPUT
          echo "$RELATED_ISSUES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update PR Description
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          # Prepare the new PR description

          NEW_DESCRIPTION=$'## ü§ñ ÏûêÎèô ÏÉùÏÑ±Îêú PR Ï†ïÎ≥¥\n\n'
          NEW_DESCRIPTION+=$'### üì¶ Î≥ÄÍ≤ΩÎêú Ìå®ÌÇ§ÏßÄ\n'
          if [ "${{ steps.changes.outputs.changed_packages }}" == "No packages detected" ]; then
            NEW_DESCRIPTION+=$'Ìå®ÌÇ§ÏßÄ Î≥ÄÍ≤Ω ÏóÜÏùå\n'
          else
            NEW_DESCRIPTION+=$(echo "${{ steps.changes.outputs.changed_packages }}" | sed 's/^/- /' | sed 's/*/-/g')
          fi

          NEW_DESCRIPTION+=$'\n### üìÑ Î≥ÄÍ≤ΩÎêú ÌååÏùº\n'
          NEW_DESCRIPTION+=$(echo "${{ steps.changes.outputs.changed_files }}" | sed 's/^/- /' | sed 's/*/-/g')

          NEW_DESCRIPTION+=$'\n\n### üìù Ïª§Î∞ã ÎÇ¥Ïó≠\n'
          NEW_DESCRIPTION+=$(echo "${{ steps.changes.outputs.commit_messages }}" | sed 's/^/- /' | sed 's/^- - /- /')

          NEW_DESCRIPTION+=$'\n\n### Í¥ÄÎ†® Ïù¥Ïäà\n'
          if [ -z "${{ steps.related_issues.outputs.related_issues }}" ]; then
            NEW_DESCRIPTION+=$'PR ÏûëÏÑ±ÏûêÏóêÍ≤å Ìï†ÎãπÎêú Í¥ÄÎ†® Ïù¥Ïäà ÏóÜÏùå\n'
          else
            NEW_DESCRIPTION+=$'${{ steps.related_issues.outputs.related_issues }}\n'
          fi

          NEW_DESCRIPTION+=$'\n\n---\n\n'

          # Get the current PR description
          CURRENT_DESCRIPTION=$(gh pr view $PR_NUMBER --json body -q .body)

          # Extract the manual part of the description (everything after the auto-generated part)
          MANUAL_DESCRIPTION=$(echo "$CURRENT_DESCRIPTION" | sed -n '/^---$/,$p' | tail -n +2)

          # Combine the new auto-generated part with the manual part
          FULL_DESCRIPTION="${NEW_DESCRIPTION}${MANUAL_DESCRIPTION}"

          # Update the PR description
          gh pr edit $PR_NUMBER --body "${FULL_DESCRIPTION}"
