name: Update PR Description

on:
  pull_request:
    types: [opened, synchronize, edited]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  update-pr-description:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get changed files, packages, and commits
        id: changes
        run: |
          # Determine if this is a new PR or an update
          if [ "${{ github.event.action }}" == "opened" ]; then
            # For new PRs, get all changes
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            # For updates, get only the new changes
            BASE_SHA=${{ github.event.before }}
            HEAD_SHA=${{ github.event.after }}
          fi

          # Get changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA | sort)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Function to find the nearest package.json or parent directory name
          find_package() {
            local dir=$(dirname "$1")
            while [[ "$dir" != "." && "$dir" != "/" ]]; do
              if [[ -f "$dir/package.json" ]]; then
                echo $(jq -r .name "$dir/package.json")
                return 0
              fi
              dir=$(dirname "$dir")
            done

            if [[ -f "./package.json" ]]; then
              echo $(jq -r .name "./package.json")
              return 0
            fi

            echo "Unknown"
          }

          # Get package names
          if [ "${{ github.event.action }}" == "opened" ]; then
            # For new PRs, get all changed packages
            CHANGED_PACKAGES=$(echo "$CHANGED_FILES" | while read file; do find_package "$file"; done | sort | uniq)
          else
            # For updates, get only new changed packages
            EXISTING_PACKAGES=$(gh pr view ${{ github.event.pull_request.number }} --json body -q '.body' | sed -n '/^### üì¶ Î≥ÄÍ≤ΩÎêú Ìå®ÌÇ§ÏßÄ/,/^###/p' | grep '^- ' | sed 's/^- //')
            NEW_PACKAGES=$(echo "$CHANGED_FILES" | while read file; do find_package "$file"; done | sort | uniq)
            CHANGED_PACKAGES=$(comm -23 <(echo "$NEW_PACKAGES" | sort) <(echo "$EXISTING_PACKAGES" | sort))
          fi

          if [ -z "$CHANGED_PACKAGES" ]; then
            CHANGED_PACKAGES="No new packages detected"
          fi
          echo "Changed packages:"
          echo "$CHANGED_PACKAGES"

          # Get commit messages
          if [ "${{ github.event.action }}" == "opened" ]; then
            # For new PRs, get all commit messages
            COMMIT_MESSAGES=$(git log --format="- %s%n%b" $BASE_SHA..$HEAD_SHA | sed -e '/^$/d' -e '/^- $/d')
          else
            # For updates, get only new commit messages
            COMMIT_MESSAGES=$(git log --format="- %s%n%b" $BASE_SHA..$HEAD_SHA | sed -e '/^$/d' -e '/^- $/d')
          fi

          echo "Commit messages:"
          echo "$COMMIT_MESSAGES"

          # Set outputs
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "changed_packages<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "commit_messages<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Fetch Open Issues for PR Creator
        id: open_issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG: "my-type-world-cup"
          REPO: "my-type-world-cup-frontend"
        run: |
          PR_CREATOR=$(gh pr view ${{ github.event.pull_request.number }} --json author --jq .author.login)
          OPEN_ISSUES=$(gh api graphql -f query='
            query($org: String!, $repo: String!, $creator: String!) {
              repository(owner: $org, name: $repo) {
                issues(states: OPEN, first: 20, filterBy: {assignee: $creator}) {
                  nodes {
                    number
                    title
                    url
                  }
                }
              }
            }
          ' -F org=$ORG -F repo=$REPO -F creator=$PR_CREATOR --jq '.data.repository.issues.nodes[] | "- [ ] \(env.ORG)/\(env.REPO)#\(.number) \(.title)"')

          echo "open_issues<<EOF" >> $GITHUB_OUTPUT
          echo "$OPEN_ISSUES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update PR Description
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          # Get the current PR description
           CURRENT_DESCRIPTION=$(gh pr view $PR_NUMBER --json body -q .body)

           # Check if this is a new PR or an update
           if [ "${{ github.event.action }}" == "opened" ]; then
             # This is a new PR, create the initial description
             NEW_DESCRIPTION=$'### üì¶ Î≥ÄÍ≤ΩÎêú Ìå®ÌÇ§ÏßÄ\n'
             if [ "${{ steps.changes.outputs.changed_packages }}" == "No packages detected" ]; then
               NEW_DESCRIPTION+=$'Ìå®ÌÇ§ÏßÄ Î≥ÄÍ≤Ω ÏóÜÏùå\n'
             else
               NEW_DESCRIPTION+=$(echo "${{ steps.changes.outputs.changed_packages }}" | sed 's/^/- /' | sed 's/*/-/g')
             fi

             NEW_DESCRIPTION+=$'\n### üìÑ Î≥ÄÍ≤ΩÎêú ÌååÏùº\n'
             NEW_DESCRIPTION+=$(echo "${{ steps.changes.outputs.changed_files }}" | sed 's/^/- /' | sed 's/*/-/g')

             NEW_DESCRIPTION+=$'\n\n### üìù Ïª§Î∞ã ÎÇ¥Ïó≠\n'
             NEW_DESCRIPTION+=$(echo "${{ steps.changes.outputs.commit_messages }}")

             NEW_DESCRIPTION+=$'\n\n### Í¥ÄÎ†® Ïù¥Ïäà\n'
             NEW_DESCRIPTION+=$'ÏïÑÎûò Î™©Î°ùÏóêÏÑú Ïù¥ PRÍ≥º Í¥ÄÎ†®Îêú Ïù¥ÏäàÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî. ÏÑ†ÌÉùÌïú Ïù¥ÏäàÎäî ÏûêÎèôÏúºÎ°ú PRÍ≥º Ïó∞Í≤∞Îê©ÎãàÎã§:\n\n'
             NEW_DESCRIPTION+=$(echo "${{ steps.open_issues.outputs.open_issues }}")
           else
             # This is an update to an existing PR
             # Extract the existing sections
             PACKAGES_SECTION=$(echo "$CURRENT_DESCRIPTION" | sed -n '/^### üì¶ Î≥ÄÍ≤ΩÎêú Ìå®ÌÇ§ÏßÄ/,/^###/p' | sed '$d')
             FILES_SECTION=$(echo "$CURRENT_DESCRIPTION" | sed -n '/^### üìÑ Î≥ÄÍ≤ΩÎêú ÌååÏùº/,/^###/p' | sed '$d')
             COMMITS_SECTION=$(echo "$CURRENT_DESCRIPTION" | sed -n '/^### üìù Ïª§Î∞ã ÎÇ¥Ïó≠/,/^###/p' | sed '$d')
             ISSUES_SECTION=$(echo "$CURRENT_DESCRIPTION" | sed -n '/^### Í¥ÄÎ†® Ïù¥Ïäà/,$p')

             # Update the packages section
             if [ "${{ steps.changes.outputs.changed_packages }}" != "No packages detected" ]; then
               PACKAGES_SECTION+=$'\n'
               PACKAGES_SECTION+=$(echo "${{ steps.changes.outputs.changed_packages }}" | sed 's/^/- /' | sed 's/*/-/g')
             fi

             # Update the files section
             FILES_SECTION+=$'\n'
             FILES_SECTION+=$(echo "${{ steps.changes.outputs.changed_files }}" | sed 's/^/- /' | sed 's/*/-/g')

             # Update the commits section
             COMMITS_SECTION+=$'\n'
             COMMITS_SECTION+=$(echo "${{ steps.changes.outputs.commit_messages }}")

             # Combine the updated sections
             NEW_DESCRIPTION="${PACKAGES_SECTION}\n\n${FILES_SECTION}\n\n${COMMITS_SECTION}\n\n${ISSUES_SECTION}"
           fi

           # Update the PR description
           gh pr edit $PR_NUMBER --body "${NEW_DESCRIPTION}"

      - name: Link Issues to PR
        if: github.event.action == 'edited' && github.event.changes.body
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |

          echo "Starting Link Issues to PR process for PR #$PR_NUMBER"

          # Check if the comment is on a PR
          if ! gh pr view $PR_NUMBER &> /dev/null; then
            echo "This is not a PR. Skipping."
            exit 0
          fi


          # Get the current PR description
          PR_BODY=$(gh pr view $PR_NUMBER --json body -q .body)

          # Extract the issue section
          ISSUE_SECTION=$(echo "$PR_BODY" | sed -n '/^### Í¥ÄÎ†® Ïù¥Ïäà/,$p')
          echo "Extracted issue section length: ${#ISSUE_SECTION}"
          echo "Issue section content:"
          echo "$ISSUE_SECTION"

          # Find checked issues (now includes org/repo and handles both [x] and [X])
          CHECKED_ISSUES=$(echo "$ISSUE_SECTION" | grep -oP '(?<=- \[[xX]\] )[a-zA-Z0-9-]+/[a-zA-Z0-9-]+#\d+' || true)
          echo -n "Checked issues: "
          if [ -z "$CHECKED_ISSUES" ]; then
            echo "none"
            echo "No checked issues found. Exiting."
            exit 0
          else
            echo "$CHECKED_ISSUES"
          fi

          # Unlink previously linked issues
          echo "Fetching currently linked issues..."
          CURRENT_LINKED_ISSUES=$(gh pr view $PR_NUMBER --json projectItems --jq '.projectItems[].content.title')
          echo "Currently linked issues:"
          echo "$CURRENT_LINKED_ISSUES"

          for ISSUE in $CURRENT_LINKED_ISSUES
          do
            echo "Attempting to unlink issue $ISSUE from PR #$PR_NUMBER"
            if gh pr edit $PR_NUMBER --remove-project "$ISSUE"; then
              echo "Successfully unlinked issue $ISSUE from PR #$PR_NUMBER"
            else
              echo "Failed to unlink issue $ISSUE from PR #$PR_NUMBER"
            fi
          done

          # Link newly checked issues to PR
          for ISSUE in $CHECKED_ISSUES
          do
            echo "Attempting to link issue $ISSUE to PR #$PR_NUMBER"
            if gh pr edit $PR_NUMBER --add-project "$ISSUE"; then
              echo "Successfully linked issue $ISSUE to PR #$PR_NUMBER"
            else
              echo "Failed to link issue $ISSUE to PR #$PR_NUMBER"
            fi
          done

          # Update PR description to reflect linked issues
          echo "Updating PR description to reflect linked issues"
          UPDATED_ISSUE_SECTION=$(echo "$ISSUE_SECTION" | sed -E "s/- \[[xX]\] ([a-zA-Z0-9-]+\/[a-zA-Z0-9-]+#[0-9]+)/- [x] \1 (Ïó∞Í≤∞Îê®)/g")
          UPDATED_PR_BODY="${PR_BODY//$ISSUE_SECTION/$UPDATED_ISSUE_SECTION}"

          echo "Updated PR body length: ${#UPDATED_PR_BODY}"
          echo "Updated PR body content:"
          echo "$UPDATED_PR_BODY"

          if gh pr edit $PR_NUMBER --body "$UPDATED_PR_BODY"; then
            echo "Successfully updated PR description"
          else
            echo "Failed to update PR description"
            exit 1
          fi

          echo "Link Issues to PR process completed successfully"
        shell: bash
